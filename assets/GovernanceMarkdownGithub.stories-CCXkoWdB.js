import{t as o}from"./VerificationSubmission-OWkqLMYZ.js";import{g as u,b5 as d,b6 as l,B as S,b7 as f,M as O}from"./useFiles-C-gUuO3T.js";import"./StringUtils-C5rFena9.js";import{h as i,H as n}from"./index-CWNnPVSy.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-BLJDCaMA.js";import"./SynapseConstants-ChMZpXcx.js";import"./OrientationBanner-i7chEOBL.js";import"./index-hnyfaBb0.js";import"./index-SaFcugpV.js";import"./iframe-4EOUQ8bB.js";import"./spreadSx-CwcO6WA9.js";import"./react-D_LySHhS.js";import"./FullWidthAlert-ZH23_QpB.js";import"./Alert-BlpIy749.js";import"./createTheme-DYL4oeW_.js";import"./DefaultPropsProvider-B-ju6ntw.js";import"./useSlot-C1phbtFm.js";import"./useForkRef-C9M3BeIK.js";import"./createSimplePaletteValueFilter-B21g1Z1B.js";import"./createSvgIcon-DSjlpoje.js";import"./Close-DmgYbxUn.js";import"./IconButton-CW20bhlv.js";import"./useTimeout-BiFxTi6S.js";import"./ButtonBase-D_LrL_Kb.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-CV8o1ixC.js";import"./Paper-D6tPDLnC.js";import"./useTheme-DmzMLzwD.js";import"./useTheme-sytMkMvf.js";import"./Stack-gteExr8A.js";import"./extendSxProp-DVJ6JJm9.js";import"./getThemeProps-qt9kRWHM.js";import"./Box-p2VywDDi.js";import"./AlertTitle-JRr5L8Gp.js";import"./Typography-DhQg4lom.js";import"./index-BzwUyqc8.js";import"./ClickAwayListener-CInpjJL6.js";import"./getReactElementRef-BgCOkbgy.js";import"./index-Cdh5LwB9.js";import"./index-CS1dtubf.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-Bn6JvDiL.js";import"./Tooltip-B3KxBNLC.js";import"./index-DRyXQikG.js";import"./useControlled-Yz390BHB.js";import"./Popper-DU4sW236.js";import"./Button-BDnTecKg.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-fxe3UGUA.js";import"./QueryClientProvider-D07X7NUM.js";import"./Link-iBTo23RV.js";import"./Collapse-DjVGkdhL.js";import"./_baseUniq-CKI6pzfM.js";import"./_Uint8Array-DebFGSR1.js";import"./isArray-DajeolBc.js";import"./_getTag-D1qiZZnQ.js";import"./isEqual-DFE9TpB7.js";import"./merge-0EmchC2B.js";import"./_initCloneObject-BVuFClPl.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-ilGL8eUA.js";import"./inputBaseClasses-DBj7FKf_.js";import"./calculateFriendlyFileSize-BW8hWbGV.js";import"./CheckCircleTwoTone-CBbCrXBM.js";import"./InfoTwoTone-hVb4MJdh.js";import"./useMutation-CYjgJjg9.js";import"./dayjs.min-D4Cpfg5N.js";import"./chunk-AYJ5UCUI-CAzluCTV.js";import"./cloneDeep-Cr1TNO7O.js";import"./Skeleton-mFHBhIq8.js";import"./SkeletonButton-BOBv4gQu.js";import"./SkeletonInlineBlock-BD6Oq8iN.js";import"./SkeletonTable-C3uCYSAu.js";import"./times-lbP68CIT.js";import"./toInteger-BBhvHv2M.js";import"./isSymbol-IrV533yU.js";import"./SkeletonParagraph-sInqAKvb.js";import"./MarkdownSynapse-CUcqkyTY.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};

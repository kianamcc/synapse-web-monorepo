import{t as o}from"./VerificationSubmission-OWkqLMYZ.js";import{g as u,b5 as d,b6 as l,B as S,b7 as f,M as O}from"./useFiles-8ATydn8A.js";import"./StringUtils-C5rFena9.js";import{h as i,H as n}from"./index-Dy7l0Jsm.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-fGzUcNy6.js";import"./SynapseConstants-BoFDoI5V.js";import"./OrientationBanner-Bfw4GBS8.js";import"./index-Dxb0ugoE.js";import"./index-BQ0h1q-c.js";import"./iframe-DY59xS4l.js";import"./spreadSx-CwcO6WA9.js";import"./react-DjEuRMZ5.js";import"./FullWidthAlert-Dt7wKjhd.js";import"./Alert-ny1Y1xel.js";import"./createTheme-BlTwNsQ1.js";import"./DefaultPropsProvider-CYP_2Idx.js";import"./useSlot-kVASu-JJ.js";import"./useForkRef-CkhoaXlV.js";import"./createSimplePaletteValueFilter-DWGwy2Im.js";import"./createSvgIcon-Bgf4v-Fl.js";import"./Close-CgY7_8Mf.js";import"./IconButton-DTeuPv0j.js";import"./useTimeout-BUMPYjbI.js";import"./ButtonBase-BJNoKMlW.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-BxPHqgfj.js";import"./Paper-DDyf3v9v.js";import"./useTheme-Df8fnDRi.js";import"./useTheme-fVMz0yaA.js";import"./Stack-DZ5v80pT.js";import"./extendSxProp-DoJ1PD9F.js";import"./getThemeProps-BBGYBewf.js";import"./Box-BrZ4r0b2.js";import"./AlertTitle-DGX0T4Jr.js";import"./Typography-CTis9lUB.js";import"./index-CBwPP-8I.js";import"./ClickAwayListener-zrX_7RVQ.js";import"./getReactElementRef-DXMeOMMR.js";import"./index-IwBO8kaU.js";import"./index-BzyuMQfT.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-DGZAZIri.js";import"./Tooltip-jtcVHvVK.js";import"./index-CkYitUbw.js";import"./useControlled-CyVPDa_k.js";import"./Popper-Cnmlk4SK.js";import"./Button-bLnqHRUE.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-Bmim-_eg.js";import"./QueryClientProvider-F9634mTY.js";import"./Link-CWjqwdMI.js";import"./Collapse-DzVgfvxm.js";import"./_baseUniq-GXz1Dpxd.js";import"./_Uint8Array-Dc7_fKH3.js";import"./isArray-DsBeDomq.js";import"./_getTag-D0e_6tbm.js";import"./isEqual-DKB0rujn.js";import"./merge-5gUM5Tdf.js";import"./_initCloneObject-CSLOxTWP.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-DoJrpD9h.js";import"./inputBaseClasses-TDVyq3ls.js";import"./calculateFriendlyFileSize-H1i4XWH4.js";import"./CheckCircleTwoTone-Cbum7mvg.js";import"./InfoTwoTone-ZmJWrGVC.js";import"./useMutation-D9nSv9vL.js";import"./dayjs.min-D8karIbq.js";import"./chunk-AYJ5UCUI-lme-Pn3H.js";import"./cloneDeep-HL-fX3rq.js";import"./Skeleton-DumsuiTC.js";import"./SkeletonButton-BrAAaQ-P.js";import"./SkeletonInlineBlock-CDsVjNpa.js";import"./SkeletonTable-BGqaPV0f.js";import"./times-ClYvAdgV.js";import"./toInteger-BJPtxikq.js";import"./isSymbol-D7jtDlbi.js";import"./SkeletonParagraph-Dalus474.js";import"./MarkdownSynapse-u1aYgxIM.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
